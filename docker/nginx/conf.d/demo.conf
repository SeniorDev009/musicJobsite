server {
    root /srv/vocalizr/web;

    location ^~ /stripe/webhooks {
        try_files $uri /app.php/stripe/webhooks$is_args$args;
    }

    location ^~ /paypal/ipn {
        try_files $uri /app.php/paypal/ipn$is_args$args;
    }

    location ^~ /app_dev.php/stripe/webhooks {
        try_files $uri /app_dev.php/stripe/webhooks$is_args$args;
    }

    location ^~ /app_dev.php/paypal/ipn {
        try_files $uri /app_dev.php/paypal/ipn$is_args$args;
    }

    location / {
        auth_basic "Private demo";
        auth_basic_user_file /etc/nginx/htpasswd;
        # try to serve file directly, fallback to index.php
        try_files $uri /app.php$is_args$args;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass php:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }
    # PROD
    location ~ ^/app\.php(/|$) {
        fastcgi_pass php:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        fastcgi_buffer_size 32k;
        fastcgi_buffers 4 32k;

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }


    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
      return 404;
    }

    location /a/ {
        rewrite ^/a(/.*)$ $1 break;
        root "/srv/vocalizr/uploads/audio";
    }

    error_log /var/log/nginx/vocalizr_error.log;
    access_log /var/log/nginx/vocalizr_access.log;

    client_max_body_size 6m;
}
