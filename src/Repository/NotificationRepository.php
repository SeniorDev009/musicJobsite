<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\Notification;
use App\Entity\UserInfo;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    // Update unread notify count
    public function updateUnreadCount($userInfo)
    {
        $hiddenNotificationTypesString =
            join(',', array_map('escapeshellarg', Notification::$hiddenNotifications));

        $sql = 'UPDATE user_info u SET u.num_notifications = 
            (SELECT COUNT(*) FROM notification n WHERE n.user_info_id = ' . $userInfo->getId() . ' AND n.notify_read = 0 AND n.notify_type NOT IN (' . $hiddenNotificationTypesString . '))
            WHERE id = ' . $userInfo->getId()
        ;
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->execute();
    }

    /**
     * @param UserInfo $user
     * @param string $type
     * @param bool $read
     * @return Notification[]
     */
    public function findUnreadByUserAndType(UserInfo $user, $type, $read = false)
    {
        $qb = $this->createQueryBuilder('n');
        $qb
            ->where('n.user_info = :user')
            ->andWhere('n.notify_type = :type')
            ->andWhere('n.notify_read = :read')

            ->setParameter('user', $user)
            ->setParameter('type', $type)
            ->setParameter('read', $read)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param UserInfo $userInfo
     */
    public function setAllRead($userInfo)
    {
        $qb = $this->createQueryBuilder('n')
            ->update()
            ->set('n.notify_read', 1)
            ->where('n.user_info = :user_id ')
            ->andWhere('n.notify_read = 0')

            ->setParameter('user_id', $userInfo->getId())
        ;

        $qb->getQuery()->execute();
        $this->updateUnreadCount($userInfo);
    }
}
