<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * StatisticsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatisticsRepository extends EntityRepository
{
    /**
     * Get Stats
     *
     * @param MessageThread $thread
     * @param int           $userInfoId
     *
     * @return array
     */
    public function findStatsForCriteria($criteria)
    {
        $q = $this->createQueryBuilder('s');
        $q->select('s');

        if (!isset($criteria['statistics_type'])) {
            $criteria['statistics_type'] = 'day';
        }
        $q->where('s.statistics_type = :stats_type')
          ->setParameter('stats_type', $criteria['statistics_type']);

        if (isset($criteria['start_date'])) {
            $q->andWhere('s.start_date >= :start_date')
              ->setParameter('start_date', $criteria['start_date']);
        }

        if (isset($criteria['end_date'])) {
            $endDate = new \DateTime($criteria['end_date']);
            if ($criteria['statistics_type'] == 'month') {
                // add a month to ensure we show progress for current month
                $endDate->add(new \DateInterval('P1M'));
            } elseif ($criteria['statistics_type'] == 'week') {
                // add a week to ensure we show progress for current week
                $endDate->add(new \DateInterval('P7D'));
            } else {
                // add a day to ensure we show progress for current day
                $endDate->add(new \DateInterval('P1D'));
            }
            $q->andWhere('s.end_date <= :end_date')
              ->setParameter('end_date', $endDate->format('Y-m-d'));
        }
        $q->orderBy('s.start_date');

        $query = $q->getQuery();

        return $query->execute();
    }
}
