<?php

namespace Vocalizr\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Vocalizr\AppBundle\Entity\ProjectBid;
use Vocalizr\AppBundle\Entity\UserInfo;

/**
 * ProjectBidRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectBidRepository extends EntityRepository
{
    /**
     * Get bid stats for project
     *
     * @param int|array $projectId
     *
     * @return array array('totalBids' => '', 'avgBidAmount' => '');
     */
    public function getBidStats($projectId)
    {
        $default = [
            'totalBids'    => 0,
            'avgBidAmount' => 0,
            'highest'      => 0,
        ];

        if (!$projectId) {
            return [];
        }

        $multiple = is_array($projectId);

        if ($multiple) {
            $projectIds = $projectId;
        } else {
            $projectIds = [$projectId];
        }

        $q = $this->createQueryBuilder('pb')
            ->select('p.id as projectId, COUNT(pb.id) totalBids, AVG(pb.amount) avgBidAmount, MAX(pb.amount) highest')
            ->leftJoin('pb.user_info', 'ui')
            ->leftJoin('pb.project', 'p')

            ->andWhere('pb.project IN (:projectIds)')
            ->andWhere('ui.is_active = 1')
            ->andWhere('pb.deleted = 0')

            ->groupBy('p.id')

            ->setParameter('projectIds', $projectIds)
        ;

        $query = $q->getQuery();

        $dataArray = $query->getArrayResult();

        if (!$multiple) {
            if (!$dataArray) {
                return $default;
            }
            return reset($dataArray);
        }

        $result = [];
        foreach ($dataArray as $statisticsRow) {
            $result[$statisticsRow['projectId']] = $statisticsRow;
        }

        return $result;
    }

    /**
     * Get project bids with order by filter
     * Filter on: date, rating, amount, alpha (username)
     *
     * @param int   $projectId
     * @param array $filter
     *
     * @return array
     */
    public function getProjectBids($projectId, $filter = [])
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui, up, uvt, vt, uvs, vs, sp')
            ->innerJoin('pb.user_info', 'ui')
            ->leftJoin('ui.user_pref', 'up')
            ->leftJoin('ui.user_voice_tags', 'uvt')
            ->leftJoin('uvt.voice_tag', 'vt')
            ->leftJoin('ui.user_vocal_styles', 'uvs')
            ->leftJoin('uvs.vocal_style', 'vs')
            ->leftJoin('ui.subscription_plan', 'sp')
            ->where('pb.project = :projectId')
            ->andWhere('ui.is_active = 1')
            ->andWhere('pb.deleted = 0')
        ;

        $params = [
            ':projectId' => $projectId,
        ];

        if (isset($filter['owner'])) {
            $q->andWhere('pb.hidden = false');
        }

        $q->setParameters($params);

        $orderByFields = [
            'default' => 'pb.created_at',
            'date'    => 'pb.created_at',
            'rating'  => 'ui.rating',
            'amount'  => 'pb.amount',
            'alpha'   => 'ui.username',
        ];

        $q
            ->addSelect('IFELSE(pb.highlightOption > 0, pb.highlightOption, 1000) as HIDDEN filtered_highlight_option')
            ->addSelect('IFELSE(pb.highlightOption > 0, pb.highlightedAt, NULL) as HIDDEN filtered_highlighted_at')
        ;

        $q
            ->addOrderBy('filtered_highlight_option', 'ASC')
            ->addOrderBy('filtered_highlighted_at', 'ASC')
        ;

        if (isset($filter['orderBy'])) {
            list($field, $dir) = $filter['orderBy'];

            if (isset($orderByFields[$field])) {
                // Show pro at the top
                if ($field == 'default') {
                    $q->addOrderBy('sp.id', 'desc');
                }

                $field = $orderByFields[$field];
                $q->addOrderBy($field, $dir);
            }
        } else {
            $q->addOrderBy('pb.created_at', 'desc');
        }

        $query = $q->getQuery();

        return $query->execute();
    }

    /**
     * Get single contest bid
     *
     * @param string $uuid
     *
     * @return ProjectBid
     */
    public function getContestBidOne($uuid, $project)
    {
        $q = $this->createQueryBuilder('pb')
                ->select('pb, ui')
                ->innerJoin('pb.user_info', 'ui')
                ->innerJoin('pb.project', 'p')
                ->where('pb.uuid = :uuid AND pb.project = :project AND p.sfs = 1');

        $params = [
            ':uuid'    => $uuid,
            ':project' => $project,
        ];
        $q->setParameters($params);
        $query = $q->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * Get contest bids with order by filter
     * Filter on: date, rating, amount, alpha (username)
     *
     * @param int   $projectId
     * @param array $filter
     *
     * @return array
     */
    public function getContestBids($projectId, $filter = [])
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui, up, ua, sp, uc')
            ->innerJoin('pb.user_info', 'ui')
            ->leftJoin('ui.user_pref', 'up')
            ->leftJoin('ui.user_audio', 'ua', 'WITH', 'ua.default_audio = 1')
            ->leftJoin('ui.subscription_plan', 'sp')
            ->leftJoin('ui.userCountry', 'uc')
            ->where('pb.project = :projectId')
            ->andWhere('pb.deleted = 0')
        ;

        $params = [
            ':projectId' => $projectId,
        ];

        if (isset($filter['owner'])) {
            $q->andWhere('pb.hidden = false');
        }

        if (isset($filter['page'])) {
            $page       = $filter['page'];
            $page       = $page - 1;
            $maxResults = $filter['maxResults'];
            $q->setMaxResults($maxResults);
            $q->setFirstResult($page * $maxResults);
        }
        $q->setParameters($params);

        $orderByFields = [
            'default' => 'pb.created_at',
            'date'    => 'pb.created_at',
            'rating'  => 'ui.rating',
            'amount'  => 'pb.amount',
            'alpha'   => 'ui.username',
            'votes'   => 'pb.vote_count',
        ];

        if (isset($filter['orderBy'])) {
            list($field, $dir) = $filter['orderBy'];

            if (isset($orderByFields[$field])) {
                // Show pro at the top
                if ($field == 'default') {
                    $q->addOrderBy('sp.id', 'desc');
                }

                $field = $orderByFields[$field];
                $q->addOrderBy($field, $dir);
            }
        } else {
            $q->orderBy('pb.created_at', 'desc');
        }

        $query = $q->getQuery();

        return $query->getResult();
    }

    public function getContestTotalBids($projectId, $filter = [])
    {
        $qb = $this->createQueryBuilder('pb');
        $qb->select($qb->expr()->count('pb.id'));
        $qb
            ->innerJoin('pb.user_info', 'ui')
            ->where('pb.project = :projectId')
            ->andWhere('pb.deleted = 0')
        ;

        $params = [
            ':projectId' => $projectId,
        ];

        if (isset($filter['owner'])) {
            $qb->andWhere('pb.hidden = false');
        }
        $qb->setParameters($params);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get contest shortlisted bids
     *
     * @param Project
     *
     * @return array
     */
    public function getContestShortlistBids($project)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui, up, ua, sp')
            ->innerJoin('pb.user_info', 'ui')
            ->leftJoin('ui.user_pref', 'up')
            ->leftJoin('ui.user_audio', 'ua', 'WITH', 'ua.default_audio = 1')
            ->leftJoin('ui.subscription_plan', 'sp')
            ->where('pb.project = :project and pb.shortlist = 1')
            ->andWhere('ui.is_active = 1')
            ->andWhere('pb.deleted = 0')
        ;

        $params = [
            ':project' => $project,
        ];

        $q->setParameters($params);

        $q->orderBy('pb.updated_at', 'desc');

        $query = $q->getQuery();

        return $query->execute();
    }

    /**
     * Get contest shortlisted bids
     *
     * @param Project
     *
     * @return array
     */
    public function getContestHiddenBids($project)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui, up, ua, sp')
            ->innerJoin('pb.user_info', 'ui')
            ->leftJoin('ui.user_pref', 'up')
            ->leftJoin('ui.user_audio', 'ua', 'WITH', 'ua.default_audio = 1')
            ->leftJoin('ui.subscription_plan', 'sp')
            ->where('pb.project = :project and pb.hidden = 1')
            ->andWhere('ui.is_active = 1')
            ->andWhere('pb.deleted = 0')
        ;

        $params = [
            ':project' => $project,
        ];

        $q->setParameters($params);

        $q->orderBy('pb.updated_at', 'desc');

        $query = $q->getQuery();

        return $query->execute();
    }

    /**
     * Check if project has been awarded to someone
     * If flag is equal to 'A'
     *
     * @param int $projectId
     *
     * @return \Vocalizr\AppBundle\Entity\ProjectBid|null
     */
    public function isProjectAwarded($projectId)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui')
            ->innerJoin('pb.user_info', 'ui')
            ->where('pb.project = :projectId AND (pb.flag = :flag OR pb.flag = :flag2)')
        ;
        $params = [
            ':projectId' => $projectId,
            ':flag'      => 'O', // Awarded
            ':flag2'     => 'A',
        ];
        $q->setParameters($params);
        $query = $q->getQuery();

        try {
            return $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Get project bid by project id and join user info
     *
     * @param string $Uuid
     * @param int    $projectId
     *
     * @return ProjectBid|null
     */
    public function getProjectBidByProjectId($Uuid, $projectId)
    {
        $q = $this->createQueryBuilder('pb')
                ->select('pb, ui')
                ->innerJoin('pb.user_info', 'ui')
                ->where('pb.uuid = :uuid AND pb.project = :projectId')
                ->setParameter(':uuid', $Uuid)
                ->setParameter(':projectId', $projectId);
        $query = $q->getQuery();

        try {
            return $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Get project bid by uuid
     * join user info and project
     *
     * @param int $uuid
     *
     * @return ProjectBid|null
     */
    public function getProjectBidByUuid($uuid)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, ui, ua, uvt, vt, uvs, vs')
            ->addSelect('(SELECT COUNT(ur.id) FROM VocalizrAppBundle:UserReview ur WHERE ur.user_info = ui.id) user_review_count')
            ->innerJoin('pb.user_info', 'ui')
            ->leftJoin('ui.user_audio', 'ua', 'WITH', 'ua.default_audio = 1')
            ->leftJoin('ui.user_voice_tags', 'uvt')
            ->leftJoin('uvt.voice_tag', 'vt')
            ->leftJoin('ui.user_vocal_styles', 'uvs')
            ->leftJoin('uvs.vocal_style', 'vs')
            ->where('pb.uuid = :uuid')
            ->andWhere('pb.deleted = 0')
            ->setParameter(':uuid', $uuid)
        ;
        $query = $q->getQuery();

        try {
            return $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Get projects that have been awarded for user
     * that need action (accept / decline)
     *
     * Query checks for project bids that have flag of 'A' = Awarded
     * When a user accepts a bid, it's set that project bid in the project table
     *
     * @param int $userInfoId
     *
     * @return array
     */
    public function getProjectsAwardedNeedAction($userInfoId)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('p, pb')
            ->innerJoin('pb.project', 'p')
            ->where('pb.user_info = :userInfoId AND p.project_bid IS NULL')
            ->andWhere('pb.flag = :flag')
            ->andWhere('pb.deleted = 0')
        ;
        $params = [
            ':userInfoId' => $userInfoId,
            ':flag'       => 'A',
        ];
        $q->setParameters($params);

        $query = $q->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get valid project bid for when a user is replying to an awarded
     *
     * @param int    $userInfoId
     * @param string $bidUuid
     *
     * @return \Vocalizr\AppBundle\Entity\ProjectBid
     */
    public function getValidProjectBidForResponse($userInfoId, $bidUuid)
    {
        $q = $this->createQueryBuilder('pb')
            ->select('pb, p, o, ui, pe')
            ->innerJoin('pb.project', 'p')
            ->leftJoin('p.project_escrow', 'pe')
            ->innerJoin('p.user_info', 'o')
            ->innerJoin('pb.user_info', 'ui')
            ->where('pb.uuid = :bidUuid')
            ->andWhere('pb.user_info = :userInfoId') // Logged in user made the bid
            ->andWhere('pb.flag = :flag') // Flag is marked as awarded
            ->andWhere('p.project_bid IS NULL') // Make sure project is set with an awarded project bid
            ->andWhere('pb.deleted = 0')
        ;
        $params = [
            ':bidUuid'    => $bidUuid,
            ':userInfoId' => $userInfoId,
            ':flag'       => 'O',
        ];
        $q->setParameters($params);
        $query = $q->getQuery();

        try {
            return $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Get the number of project bids this user has
     *
     *
     * @param UserInfo $userInfo
     *
     * @return int
     */
    public function getProjectBidCountForUser($userInfo)
    {
        $query = $this->createQueryBuilder('pb')
            ->select('count(pb)')
            ->where('pb.user_info = :user')
            ->andWhere('pb.deleted = 0')
            ->setParameter('user', $userInfo)
        ->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * @param UserInfo $userInfo
     */
    public function deleteNotAwardedUserBids($userInfo)
    {
        $qb = $this->createQueryBuilder('pb');
        $qb
            ->delete()
            ->where('pb.user_info = :user')
            ->andWhere('pb.flag is null')

            ->setParameter('user', $userInfo)
        ;

        $qb->getQuery()->execute();
    }

    /**
     * @param UserInfo $userInfo
     * @param bool     $deleted
     */
    public function markUserBidsDeleted(UserInfo $userInfo, $deleted = true)
    {
        $qb = $this->createQueryBuilder('pb');
        $qb
            ->update()
            ->where('pb.user_info = :user')

            ->set('pb.deleted', $deleted)

            ->setParameter('user', $userInfo)
        ;

        $qb->getQuery()->execute();
    }
}
