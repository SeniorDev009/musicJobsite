<?php

namespace Vocalizr\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Vocalizr\AppBundle\Entity\SubscriptionPlan;

/**
 * SubscriptionPlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionPlanRepository extends EntityRepository
{
    const PLAN_FREE = 'FREE';
    const PLAN_PRO  = 'PRO';

    /**
     * Get users current subscription
     *
     * @param int $userInfoId
     *
     * @return array|null
     */
    public function getActiveSubscription($userInfoId)
    {
        $userSubscriptionRepo = $this->_em->getRepository('VocalizrAppBundle:UserSubscription');

        if ($userSubscription = $userSubscriptionRepo->getActiveSubscription($userInfoId)) {
            $subscriptionPlan = $userSubscription['subscription_plan'];
        } else {
            $subscriptionPlan = $this->getByStaticKey(SubscriptionPlanRepository::PLAN_FREE);
        }

        return $subscriptionPlan;
    }

    /**
     * @return SubscriptionPlan|null
     */
    public function getProPlan()
    {
        return $this->getByStaticKey(SubscriptionPlan::PLAN_PRO, Query::HYDRATE_OBJECT);
    }

    /**
     * Get subscription plan by static key
     *
     * @param string $key
     * @param int $hydrationMode
     * @return SubscriptionPlan|null
     */
    public function getByStaticKey($key, $hydrationMode = Query::HYDRATE_ARRAY)
    {
        $q = $this->createQueryBuilder('sp');
        $q
            ->where('sp.static_key = :staticKey')
            ->setMaxResults(1)
            ->setParameter(':staticKey', $key)
        ;

        try {
            return $q->getQuery()->getOneOrNullResult($hydrationMode);
        } catch (\Doctrine\ORM\NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * Should return [
     *      'PRO' => [],
     *      'FREE' => [],
     * ]
     *
     * @return array
     */
    public function getFeaturePrices()
    {
        $qb = $this->createQueryBuilder('sp');

        $qb
            ->select(
                'sp.project_announce_fee  as announce',
                'sp.project_favorites_fee       as favorites',
                'sp.project_feature_fee         as feature',
                'sp.project_highlight_fee       as highlight',
                'sp.project_lock_to_cert_fee    as lock_to_cert',
                'sp.project_messaging_fee       as messaging',
                'sp.project_private_fee         as private',
                'sp.project_restrict_fee        as restrict',
                'sp.static_key                  as type',
                'sp.payment_percent_taken       as payment_percent_taken',
                'sp.project_percent_added       as project_percent_added'
            )
        ;
        $rawResult = $qb->getQuery()->getResult();

        $result = [];
        foreach ($rawResult as $item)
        {
            $result[$item['type']] = $item;
            unset($result[$item['type']]['type']);
        }

        return $result;
    }
}
