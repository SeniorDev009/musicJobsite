<?php

namespace Vocalizr\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Vocalizr\AppBundle\Entity\SubscriptionPlan;
use Vocalizr\AppBundle\Entity\UserInfo;
use Vocalizr\AppBundle\Entity\UserWithdraw;

/**
 * UserWithdrawRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserWithdrawRepository extends EntityRepository
{
    /**
     * Get results by user, ordered by created_at DESC
     *
     * @param int $userInfoId
     *
     * @return array
     */
    public function getByUser($userInfoId)
    {
        $query = $this->getByUserQuery($userInfoId);

        return $query->execute();
    }

    /**
     * Get results by user, ordered by created_at DESC Query
     *
     * @param int $userInfoId
     *
     * @return array
     */
    public function getByUserQuery($userInfoId)
    {
        $q = $this->createQueryBuilder('uw')
                ->where('uw.user_info = :userInfoId')
                ->orderBy('uw.created_at', 'DESC');
        $q->setParameter(':userInfoId', $userInfoId);
        return $q->getQuery();
    }

    /**
     * @param int|UserInfo $userInfoId
     * @return UserWithdraw|null
     */
    public function findLastNotCancelled($userInfoId)
    {
        $qb = $this->createQueryBuilder('uw');
        $qb
            ->where('uw.user_info = :userInfoId')
            ->andWhere('uw.status != :cancelled_status')
            ->orderBy('uw.created_at', 'DESC')
            ->setParameter('userInfoId', $userInfoId)
            ->setParameter('cancelled_status', UserWithdraw::WITHDRAW_STATUS_CANCELLED)
            ->setMaxResults(1)
        ;

        try {
            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @param string $status
     *
     * @return UserWithdraw[]|null
     */
    public function getByStatus($status)
    {
        $qb = $this->createQueryBuilder('uw');
        $qb
            ->where('uw.status = :status')
            ->setParameter('status', $status)
        ;

        return $qb->getQuery()->getResult();
    }


    /**
     * @param string $status
     *
     * @return Query
     */
    public function findByStatus($status)
    {
        $qb = $this->createQueryBuilder('uw');
        $qb
            ->leftJoin('uw.user_info', 'ui')
            ->leftJoin('ui.subscription_plan', 'sp')
            ->where('uw.status = :status AND sp.static_key = :pro')
            ->orWhere('uw.status = :status AND uw.created_at <= :date')
            ->setParameter('pro', SubscriptionPlan::PLAN_PRO)
            ->setParameter('status', $status)
            ->setParameter('date', new \DateTime("-4 days"))

            ->addOrderBy('uw.created_at', 'ASC')
        ;

        return $qb->getQuery();
    }

    /**
     * @param UserInfo $user
     * @return mixed
     */
    public function findLastWithdrawal(UserInfo $user)
    {
        $qb = $this->createQueryBuilder('uw');
        // get the most recent withdrawel request made by this user
        $qb
            ->select('uw, ui')
            ->innerJoin('uw.user_info', 'ui')
            ->where('uw.user_info = :userInfoId')
            ->setParameter('userInfoId', $user->getId())
            ->orderBy('uw.created_at', 'DESC')
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param UserInfo $user
     * @param array|null $statuses
     * @return UserWithdraw|null
     */
    public function findLastWithdrawalByStatuses(UserInfo $user, $statuses = null)
    {
        $qb = $this->prepareQBToFindByStatusAndUser($user, $statuses);
        $qb
            ->addOrderBy('uw.created_at', 'DESC')
            ->setMaxResults(1)
            ;
        return $qb->getQuery()->getOneOrNullResult();
    }


    /**
     * @param UserInfo $user
     * @param null $statuses
     * @return UserWithdraw[]
     */
    public function findByStatusesAndUser(UserInfo $user, $statuses = null)
    {
        $qb = $this->prepareQBToFindByStatusAndUser($user, $statuses);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param UserInfo $user
     * @param array|null $statuses
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function prepareQBToFindByStatusAndUser($user, $statuses = null)
    {
        $qb = $this->createQueryBuilder('uw');
        $qb
            ->andWhere('uw.user_info = :user')
            ->setParameter('user', $user)
        ;

        if ($statuses) {
            $qb
                ->andWhere('uw.status IN (:statuses)')
                ->setParameter('statuses', $statuses)
            ;
        }
        return $qb;
    }

}
